# the graalpy version implies the below versions, so update these together
{% set version = "23.0.0" %}
{% set gp_python_version = "3.10.8" %}
{% set mx_version = "6.18.0" %}
{% set java_version = "17.0.7+4" %}
{% set jvmci_version = "23.0-b09" %}

{% if graalpy_distribution is not defined %}
{% set graalpy_distribution = "standalone" %}
{% endif %}

# Keep increasing the build_num until we get a new graalpy version. Do not reset
{% set build_num = "0" %}

{% set python_maj_min = ".".join(gp_python_version.split(".")[:2]) %}
{% set graalpy_maj_min = ".".join(version.split(".")[:2]) %}
{% set graalpy_abi = "native" %}

package:
  name: graalpy
  version: {{ version }}

source:
  - url: https://github.com/graalvm/labs-openjdk-{{ java_version.split(".")[0] }}/releases/download/jvmci-{{ jvmci_version }}/labsjdk-ce-{{ java_version }}-jvmci-{{ jvmci_version }}-linux-aarch64.tar.gz  # [build_platform == "linux-aarch64"]
    sha256: 22129ac90aa9e747509a095564300c1e9a2191267fc1dd6009464919ada56184  # [build_platform == "linux-aarch64"]
  - url: https://github.com/graalvm/labs-openjdk-{{ java_version.split(".")[0] }}/releases/download/jvmci-{{ jvmci_version }}/labsjdk-ce-{{ java_version }}-jvmci-{{ jvmci_version }}-linux-amd64.tar.gz  # [build_platform == "linux-64"]
    sha256: fa69a21111e34a6bac4550ef6296987df19f0c09ae90c30f05f1a28110cdf260  # [build_platform == "linux-64"]
  - url: https://github.com/graalvm/labs-openjdk-{{ java_version.split(".")[0] }}/releases/download/jvmci-{{ jvmci_version }}/labsjdk-ce-{{ java_version }}-jvmci-{{ jvmci_version }}-darwin-amd64.tar.gz  # [osx and x86_64]
    sha256: a43e5365ed29b8e7de3a1d12f804a2cf85d8a0dbdc7814048eef17360df0e5e8  # [osx and x86_64]
  - url: https://github.com/graalvm/labs-openjdk-{{ java_version.split(".")[0] }}/releases/download/jvmci-{{ jvmci_version }}/labsjdk-ce-{{ java_version }}-jvmci-{{ jvmci_version }}-darwin-aarch64.tar.gz  # [osx and arm64]
    sha256: bdf443d32f7c0fc24627926ef9b99340793ce376335fefd91d8acbed9ac6b26c  # [osx and arm64]
  - url: https://github.com/graalvm/labs-openjdk-{{ java_version.split(".")[0] }}/releases/download/jvmci-{{ jvmci_version }}/labsjdk-ce-{{ java_version }}-jvmci-{{ jvmci_version }}-windows-amd64.tar.gz  # [win64]
    sha256: e6d6540352d227fa6592d03af32bbbeec8ec646a8b465547cf6cb4cd9bfbb0b1  # [win64]
    folder: labsjdk
  - url: https://github.com/graalvm/mx/archive/refs/tags/{{ mx_version }}.zip
    sha256: b56529906a2416ed93e1083edff22b8d98c5741f87444e37ddb035cc34dfe398
    folder: mx
  # - url: https://github.com/oracle/graal/archive/refs/tags/vm-ce-{{ version }}.zip
  #   sha256: 5e65db23299ba21ff6a412eb1ab840b3c05be3d047b0d73eb67b05a5ba3ea2fb
  - git_url: https://github.com/oracle/graal.git
    git_rev: release/graal-vm/{{ graalpy_maj_min }}
    folder: graal
    patches:
      - patches/sulong-without-tck.patch
  # - url: https://github.com/oracle/graalpython/archive/refs/tags/vm-ce-{{ version }}.zip
  #   sha256: 9a01e90a9a0edefb1c99583413936408239c9d4c67a65e142647f30558e8be6a
  - git_url: https://github.com/oracle/graalpython.git
    git_rev: release/graal-vm/{{ graalpy_maj_min }}
    folder: graalpython

build:
  number: {{ build_num }}
  skip: true  # [win or osx]

outputs:
  - name: graalpy
    version: {{ version }}
    script: build_graalpy.sh
    build:
      skip_compile_pyc:
        - '*.py'
      number: {{ build_num }}
      string: {{ build_num }}_{{ graalpy_distribution }}_{{ graalpy_abi }}
      track_features:   # [graalpy_distribution == "graalvm"]
        - openjdk  # [graalpy_distribution == "graalvm"]
      script_env:   # [graalpy_distribution == "standalone"]
        - GRAALPY_STANDALONE_BUILD=true  # [graalpy_distribution == "standalone"]
      run_exports:
        weak:
          - graalpy >={{ version }}
        noarch:
          - {{ pin_subpackage("python", max_pin="x.x", min_pin="x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - pypy3.9 >=7.3.9
        - make
        - patch
        - zlib
        - git
        - curl
        - cmake
        - patchelf  # [linux]
      host:
        - zlib
      run:
        - libzlib
        - patch
        - curl
        - __osx >={{ MACOS_DEPLOYMENT_TARGET|default("10.12") }}  # [osx]
        - python_abi {{ python_maj_min }}.* *_graalpy{{ graalpy_maj_min.replace('.', '') }}_{{ python_maj_min.replace('.', '') }}_{{ graalpy_abi }}
      run_constrained:
        - python {{ gp_python_version }} {{ build_num }}_{{ graalpy_abi }}{{ graalpy_maj_min.replace('.', '') }}_graalpy
    test:
      commands:
        - python3 --help
        - python3 -c "import platform; print(platform._sys_version())"
        - graalpy -m venv --help
        - graalpy -m venv testvenv
        - testvenv/bin/graalpy -c "import _struct; print(_struct.pack('I', 15663050))"

  - name: python
    version: {{ gp_python_version }}
    build:
      number: {{ build_num }}
      string: {{ build_num }}_{{ graalpy_abi }}{{ graalpy_maj_min.replace('.', '') }}_graalpy
      track_features:
        - graalpy
      run_exports:
        weak:
          - {{ pin_subpackage("graalpy", max_pin="x.x", min_pin="x.x") }}
          - python_abi {{ python_maj_min }}.* *_graalpy{{ graalpy_maj_min.replace('.', '') }}_{{ python_maj_min.replace('.', '') }}_{{ graalpy_abi }}
        noarch:
          - {{ pin_subpackage("python", max_pin="x.x", min_pin="x.x") }}
    requirements:
      host:
        - {{ pin_subpackage("graalpy", max_pin="x.x.x", min_pin="x.x.x") }}
      run:
        - {{ pin_subpackage("graalpy", max_pin="x.x.x", min_pin="x.x.x") }}
        - python_abi {{ python_maj_min }}.* *_graalpy{{ graalpy_maj_min.replace('.', '') }}_{{ python_maj_min.replace('.', '') }}_{{ graalpy_abi }}
    test:
      requires:
        - setuptools
        - pip
      imports:
        # check that noarch packages work
        - setuptools
      commands:
        - python --version
        - pip -h
        - test $(python -c "import sys; print('.'.join(str(i) for i in sys.version_info[:3]))") == "{{ gp_python_version }}"  # [unix]
        - test $(python -c "import sys; print(sys.implementation.name)") == "graalpy"  # [unix]

  - name: graalpy-graalvm
    version: {{ version }}
    build:
      number: {{ build_num }}
      skip: true  # [graalpy_distribution == "standalone"]
    requirements:
      host:
        - {{ pin_subpackage('graalpy', exact=True) }}
      run:
        - {{ pin_subpackage('graalpy', exact=True) }}
    test:
      commands:
        - java --version

  - name: openjdk
    version: {{ java_version.replace("+", ".") }}
    build:
      number: {{ build_num }}
      string: {{ build_num }}_graalvm{{ jvmci_version.replace(".", "").replace("-", "") }}
      track_features:
        - graalpy-graalvm
      skip: true  # [graalpy_distribution == "standalone"]
      run_exports:
        weak:
          - graalpy-graalvm >={{ graalpy_maj_min }}
    requirements:
      host:
        - {{ pin_subpackage("graalpy-graalvm", exact=True) }}
      run:
        - {{ pin_subpackage("graalpy-graalvm", exact=True) }}
    test:
      commands:
        - java --version
        - javac --version

about:
  home: http://graalvm.org/python
  license: UPL-1.0
  license_file: LICENSE_GRAALPY.txt
  summary: >
    GraalPy is a high-performance Python implementation on GraalVM. See https://conda-forge.org/blog/posts/2020-03-10-pypy for more information about using it in conda, replacing PyPy/pypy/pp with GraalPy/graalpy/gp in commands.

extra:
  recipe-maintainers:
    - timfel
    - msimacek
    - isuruf
